{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/filters/bulgepinch/bulgepinch.js","pixi-extra-filters.min.js","src/filters/colorreplace/ColorReplaceFilter.js","src/filters/glow/GlowFilter.js","src/filters/outline/OutlineFilter.js","src/index"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","BulgePinchFilter","PIXI","filters","AbstractFilter","this","join","dimensions","type","value","radius","strength","center","x","y","prototype","Object","create","constructor","defineProperties","get","uniforms","set",2,"ColorReplaceFilter","targetColor","replacementColor","epsilon","defineProperty","g","b","z","dirty",3,"GlowFilter","viewWidth","viewHeight","distance","outerStrength","innerStrength","color","quality","toFixed","glowColor","Float32Array","pixelWidth","pixelHeight","Math","pow","utils","rgb2hex","hex2rgb",4,"OutlineFilter","thickness","outlineColor",5,"filter","./filters/bulgepinch/bulgepinch","./filters/colorreplace/ColorReplaceFilter","./filters/glow/GlowFilter","./filters/outline/OutlineFilter"],"mappings":"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","file":"pixi-extra-filters.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n* @author Julien CLEREL @JuloxRox\r\n* original filter https://github.com/evanw/glfx.js/blob/master/src/filters/warp/bulgepinch.js by Evan Wallace : http://madebyevan.com/\r\n*/\r\n \r\n/**\r\n* @filter Bulge / Pinch\r\n* @description Bulges or pinches the image in a circle.\r\n* @param center The x and y coordinates of the center of the circle of effect.\r\n* @param radius The radius of the circle of effect.\r\n* @param strength -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\r\n*\r\n* @class BulgePinchFilter\r\n* @extends AbstractFilter\r\n* @constructor\r\n*/\r\n\r\nfunction BulgePinchFilter()\r\n{\r\n    PIXI.filters.AbstractFilter.call(this,\r\n        // vertex shader\r\n        null,\r\n        // fragment shader\r\n        [\r\n            'precision mediump float;',\r\n            'uniform float radius;',\r\n            'uniform float strength;',\r\n            'uniform vec2 center;',\r\n            'uniform sampler2D uSampler;',\r\n            'uniform vec4 dimensions;',\r\n            'varying vec2 vTextureCoord;',\r\n            \r\n            'void main()',\r\n            '{',\r\n                'vec2 coord = vTextureCoord * dimensions.xy;',\r\n                'coord -= center;',\r\n                'float distance = length(coord);',\r\n                'if (distance < radius) {',\r\n                    'float percent = distance / radius;',\r\n                    'if (strength > 0.0) {',\r\n                        'coord *= mix(1.0, smoothstep(0.0, radius /     distance, percent), strength * 0.75);',\r\n                    '} else {',\r\n                        'coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);',\r\n                    '}',\r\n                '}',\r\n                'coord += center;',\r\n                'gl_FragColor = texture2D(uSampler, coord / dimensions.xy);',\r\n                'vec2 clampedCoord = clamp(coord, vec2(0.0), dimensions.xy);',\r\n                'if (coord != clampedCoord) {',\r\n                    'gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));',\r\n                '}',\r\n            '}'\r\n        ].join('\\n'),\r\n        // custom uniforms\r\n        {\r\n            dimensions: { type: '4f', value: [0,0,0,0] },\r\n            radius: { type: '1f', value: 100 },\r\n            strength: { type: '1f', value: 0.5 },\r\n            center: { type: 'v2', value: {x: 150, y: 150} }\r\n        }\r\n    );\r\n};\r\n\r\nBulgePinchFilter.prototype = Object.create(PIXI.filters.AbstractFilter.prototype);\r\nBulgePinchFilter.prototype.constructor = BulgePinchFilter;\r\n\r\nObject.defineProperties(BulgePinchFilter.prototype, {\r\n/**\r\n* The radius of the circle of effect.\r\n*\r\n* @property radius\r\n* @type Number\r\n*/\r\n    radius: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.radius.value;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.radius.value = value;\r\n        }\r\n    },\r\n/**\r\n* The strength of the effect. -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\r\n*\r\n* @property strength\r\n* @type Number\r\n*/\r\n    strength: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.strength.value;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.strength.value = value;\r\n        }\r\n    },\r\n/**\r\n* The x and y coordinates of the center of the circle of effect.\r\n*\r\n* @property center\r\n* @type Point\r\n*/\r\n    center: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.center.value;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.center.value = value;\r\n        }\r\n    }\r\n});",null,"/**\r\n * ColoreReplaceFilter, originally by mishaa, updated by timetocode\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * \r\n * @class\r\n * @param targetColor {FloatArray32} The color to find, as a 3 component RGB e.g. new Float32Array(1.0, 1.0, 1.0)\r\n * @param replacementColor {FloatArray32} The color to find, as a 3 component RGB e.g. new Float32Array(1.0, 0.5, 1.0)\r\n * @param epsilon {float} Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\r\n * \r\n * @example\r\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\r\n *  someSprite.shader = new ColorReplaceFilter(\r\n *   new Float32Array([220/255.0, 220/255.0, 220/255.0]), \r\n *   new Float32Array([225/255.0, 200/255.0, 215/255.0]),\r\n *   0.001\r\n * ); \r\n */\r\nvar ColorReplaceFilter = function (targetColor, replacementColor, epsilon) {  \r\n  PIXI.AbstractFilter.call(this, \r\n    // vertex shader\r\n    null,\r\n    // fragment shader\r\n    [\r\n      'precision mediump float;',\r\n      'varying vec2 vTextureCoord;',\r\n      'uniform sampler2D texture;',\r\n      'uniform vec3 targetColor;',\r\n      'uniform vec3 replacementColor;',\r\n      'uniform float epsilon;',\r\n      'void main(void) {',\r\n      '  vec4 currentColor = texture2D(texture, vTextureCoord);',\r\n      '  vec3 colorDiff = targetColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));',\r\n      '  float colorDistance = length(colorDiff);',\r\n      '  float doReplace = step(colorDistance, epsilon);',\r\n      '  gl_FragColor = vec4(mix(currentColor.rgb, (replacementColor + colorDiff) * currentColor.a, doReplace), currentColor.a);',\r\n      '}'\r\n    ].join('\\n'),\r\n    // custom unifroms\r\n    {\r\n      targetColor: { type: '3f', value: targetColor },\r\n      replacementColor: { type: '3f', value: replacementColor },\r\n      epsilon: { type: '1f', value: epsilon }\r\n    }\r\n  );\r\n};\r\n\r\nColorReplaceFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);\r\nColorReplaceFilter.prototype.constructor = ColorReplaceFilter;\r\n\r\nObject.defineProperty(ColorReplaceFilter.prototype, 'targetColor', {\r\n  set: function (value) {\r\n    var r = ((value & 0xFF0000) >> 16) / 255,\r\n        g = ((value & 0x00FF00) >> 8) / 255,\r\n        b = (value & 0x0000FF) / 255;\r\n    this.uniforms.targetColor.value = { x: r, y: g, z: b };\r\n    this.dirty = true;\r\n  }\r\n});\r\n\r\nObject.defineProperty(ColorReplaceFilter.prototype, 'replacementColor', {\r\n  set: function (value) {\r\n    var r = ((value & 0xFF0000) >> 16) / 255,\r\n        g = ((value & 0x00FF00) >> 8) / 255,\r\n        b = (value & 0x0000FF) / 255;\r\n    this.uniforms.replacementColor.value = { x: r, y: g, z: b };\r\n    this.dirty = true;\r\n  }\r\n});\r\n\r\nObject.defineProperty(ColorReplaceFilter.prototype, 'epsilon', {\r\n  set: function (value) {\r\n    this.uniforms.epsilon.value = value;\r\n    this.dirty = true;\r\n  }\r\n});","/**\r\n * GlowFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/12756-glow-filter/?hl=mishaa#entry73578\r\n * http://codepen.io/mishaa/pen/raKzrm\r\n * \r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param outerStrength {number} The strength of the glow outward from the edge of the sprite.\r\n * @param innerStrength {number} The strength of the glow inward from the edge of the sprite.\r\n * @param color {number} The color of the glow.\r\n * @param quality {number} A number between 0 and 1 that describes the quality of the glow.\r\n * \r\n * @example\r\n *  someSprite.filters = [\r\n *      new GlowFilter(renderer.width, renderer.height, 15, 2, 1, 0xFF0000, 0.5)\r\n *  ];\r\n */\r\nfunction GlowFilter(viewWidth, viewHeight, distance, outerStrength, innerStrength, color, quality) {\r\n    PIXI.filters.AbstractFilter.call(this,\r\n        // vertex shader\r\n        null,\r\n        // fragment shader\r\n        [\r\n            'precision mediump float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec4 vColor;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'uniform float distance;',\r\n            'uniform float outerStrength;',\r\n            'uniform float innerStrength;',\r\n            'uniform vec4 glowColor;',\r\n            'uniform float pixelWidth;',\r\n            'uniform float pixelHeight;',\r\n            'vec2 px = vec2(pixelWidth, pixelHeight);',\r\n\r\n            'void main(void) {',\r\n            '    const float PI = 3.14159265358979323846264;',\r\n            '    vec4 ownColor = texture2D(uSampler, vTextureCoord);',\r\n            '    vec4 curColor;',\r\n            '    float totalAlpha = 0.0;',\r\n            '    float maxTotalAlpha = 0.0;',\r\n            '    float cosAngle;',\r\n            '    float sinAngle;',\r\n            '    for (float angle = 0.0; angle <= PI * 2.0; angle += ' + (1 / quality / distance).toFixed(7) + ') {',\r\n            '       cosAngle = cos(angle);',\r\n            '       sinAngle = sin(angle);',\r\n            '       for (float curDistance = 1.0; curDistance <= ' + distance.toFixed(7) + '; curDistance++) {',\r\n            '           curColor = texture2D(uSampler, vec2(vTextureCoord.x + cosAngle * curDistance * px.x, vTextureCoord.y + sinAngle * curDistance * px.y));',\r\n            '           totalAlpha += (distance - curDistance) * curColor.a;',\r\n            '           maxTotalAlpha += (distance - curDistance);',\r\n            '       }',\r\n            '    }',\r\n            '    maxTotalAlpha = max(maxTotalAlpha, 0.0001);',\r\n    \r\n            '    ownColor.a = max(ownColor.a, 0.0001);',\r\n            '    ownColor.rgb = ownColor.rgb / ownColor.a;',\r\n            '    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);',\r\n            '    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;',\r\n            '    float resultAlpha = (ownColor.a + outerGlowAlpha);',\r\n            \r\n            '    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);',\r\n            '}'\r\n        ].join('\\n'),\r\n        // custom uniforms\r\n        {\r\n            distance: { type: '1f', value: distance },\r\n            outerStrength: { type: '1f', value: 0 },\r\n            innerStrength: { type: '1f', value: 0 },\r\n            glowColor: { type: '4f', value: new Float32Array([0, 0, 0, 1]) },\r\n            pixelWidth: { type: '1f', value: 0 },\r\n            pixelHeight: { type: '1f', value: 0 }\r\n        }\r\n    );\r\n\r\n    quality = Math.pow(quality, 1/3);\r\n    this.quality = quality;\r\n\r\n    this.uniforms.distance.value *= quality;\r\n\r\n    viewWidth *= quality;\r\n    viewHeight *= quality;\r\n\r\n    this.color = color;\r\n    this.outerStrength = outerStrength;\r\n    this.innerStrength = innerStrength;\r\n    this.viewWidth = viewWidth;\r\n    this.viewHeight = viewHeight;\r\n};\r\n\r\nGlowFilter.prototype = Object.create(PIXI.filters.AbstractFilter.prototype);\r\nGlowFilter.prototype.constructor = GlowFilter;\r\nmodule.exports = GlowFilter;\r\n\r\nObject.defineProperties(GlowFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.glowColor.value);\r\n        },\r\n        set: function(value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.glowColor.value);\r\n        }\r\n    },\r\n\r\n    outerStrength: {\r\n        get: function () {\r\n            return this.uniforms.outerStrength.value;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.outerStrength.value = value;\r\n        }\r\n    },\r\n\r\n    innerStrength: {\r\n        get: function () {\r\n            return this.uniforms.innerStrength.value;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.innerStrength.value = value;\r\n        }\r\n    },\r\n\r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth.value = 1 / value;\r\n        }\r\n    },\r\n\r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight.value = 1 / value;\r\n        }\r\n    }\r\n});\r\n","/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB\r\n * \r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param thickness {number} The tickness of the outline.\r\n * @param color {number} The color of the glow.\r\n * \r\n * @example\r\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\r\n */\r\nfunction OutlineFilter(viewWidth, viewHeight, thickness, color) {\r\n    PIXI.filters.AbstractFilter.call(this,\r\n        // vertex shader\r\n        null,\r\n        // fragment shader\r\n        [\r\n            'precision mediump float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'uniform float thickness;',\r\n            'uniform vec4 outlineColor;',\r\n            'uniform float pixelWidth;',\r\n            'uniform float pixelHeight;',\r\n            'vec2 px = vec2(pixelWidth, pixelHeight);',\r\n\r\n            'void main(void) {',\r\n            '    const float PI = 3.14159265358979323846264;',\r\n            '    vec4 ownColor = texture2D(uSampler, vTextureCoord);',\r\n            '    vec4 curColor;',\r\n            '    float maxAlpha = 0.;',\r\n            '    for (float angle = 0.; angle < PI * 2.; angle += ' + (1 / thickness).toFixed(7) + ') {',\r\n            '        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));',\r\n            '        maxAlpha = max(maxAlpha, curColor.a);',\r\n            '    }',\r\n            '    float resultAlpha = max(maxAlpha, ownColor.a);',\r\n            '    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);',\r\n            '}'\r\n        ].join('\\n'),\r\n        // custom uniforms\r\n        {\r\n            thickness: { type: '1f', value: thickness },\r\n            outlineColor: { type: '4f', value: new Float32Array([0, 0, 0, 1]) },\r\n            pixelWidth: { type: '1f', value: null },\r\n            pixelHeight: { type: '1f', value: null },\r\n        }\r\n    );\r\n\r\n    this.color = color;\r\n    this.viewWidth = viewWidth;\r\n    this.viewHeight = viewHeight;\r\n};\r\n\r\nOutlineFilter.prototype = Object.create(PIXI.filters.AbstractFilter.prototype);\r\nOutlineFilter.prototype.constructor = OutlineFilter;\r\nmodule.exports = OutlineFilter;\r\n\r\nObject.defineProperties(OutlineFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.outlineColor.value);\r\n        },\r\n        set: function (value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.outlineColor.value);\r\n        }\r\n    },\r\n    \r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth.value = 1 / value;\r\n        }\r\n    },\r\n    \r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight.value = 1 / value;\r\n        }\r\n    }\r\n});\r\n","module.exports = {\r\n    GlowFilter: require('./filters/glow/GlowFilter'),\r\n    OutlineFilter: require('./filters/outline/OutlineFilter'),\r\n    BulgePinchFilter: require('./filters/bulgepinch/bulgepinch'),\r\n    ColorReplaceFilter: require('./filters/colorreplace/ColorReplaceFilter')\r\n};\r\n\r\nfor (var filter in module.exports) {\r\n    PIXI.filters[filter] = module.exports[filter];\r\n}\r\n"],"sourceRoot":"./"}